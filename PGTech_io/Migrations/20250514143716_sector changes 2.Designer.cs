// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PGTech_io.Models;

#nullable disable

namespace PGTech_io.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250514143716_sector changes 2")]
    partial class sectorchanges2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("identity")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "identity");

                    b.HasData(
                        new
                        {
                            Id = "Tecnico",
                            Name = "Tecnico",
                            NormalizedName = "TECNICO"
                        },
                        new
                        {
                            Id = "Usuario",
                            Name = "Usuario",
                            NormalizedName = "USUARIO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "identity");
                });

            modelBuilder.Entity("PGTech_io.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "identity");
                });

            modelBuilder.Entity("PGTech_io.Models.Documentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("CreatedWhenProperty")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Createdwhen")
                        .HasColumnType("date")
                        .HasColumnName("createdwhen");

                    b.Property<string>("FileNameProperty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileTypeProperty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileUrlproperty")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FileURLProperty");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("filename");

                    b.Property<string>("Filetype")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("filetype");

                    b.Property<string>("Fileurl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fileurl");

                    b.Property<int>("IdProperty")
                        .HasColumnType("integer");

                    b.Property<int>("Idsolicitation")
                        .HasColumnType("integer")
                        .HasColumnName("idsolicitation");

                    b.HasKey("Id")
                        .HasName("Documentation_pkey");

                    b.HasIndex(new[] { "Idsolicitation" }, "IX_Documentation_idsolicitation");

                    b.ToTable("Documentation", "identity");
                });

            modelBuilder.Entity("PGTech_io.Models.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Createdwhen")
                        .HasColumnType("date")
                        .HasColumnName("createdwhen");

                    b.Property<int>("Idsolicitation")
                        .HasColumnType("integer")
                        .HasColumnName("idsolicitation");

                    b.Property<string>("Iduser")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("iduser");

                    b.Property<string>("Solutiondescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("solutiondescription");

                    b.Property<DateOnly?>("Updatedwhen")
                        .HasColumnType("date")
                        .HasColumnName("updatedwhen");

                    b.HasKey("Id")
                        .HasName("Responses_pkey");

                    b.HasIndex(new[] { "Idsolicitation" }, "IX_Responses_idsolicitation");

                    b.HasIndex(new[] { "Iduser" }, "IX_Responses_iduser");

                    b.ToTable("Responses", "identity");
                });

            modelBuilder.Entity("PGTech_io.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("Sectors_pkey");

                    b.ToTable("Sectors", "identity");
                });

            modelBuilder.Entity("PGTech_io.Models.Send", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Client")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client");

                    b.Property<DateOnly>("Createdwhen")
                        .HasColumnType("date")
                        .HasColumnName("createdwhen");

                    b.Property<int>("IdSubsector")
                        .HasColumnType("integer");

                    b.Property<int>("Idsector")
                        .HasColumnType("integer");

                    b.Property<int?>("IdsectorNavigationId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdsubsectorNavigationId")
                        .HasColumnType("integer");

                    b.Property<string>("Iduser")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("iduser");

                    b.Property<string>("Problemdescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("problemdescription");

                    b.Property<DateOnly?>("Updatedwhen")
                        .HasColumnType("date")
                        .HasColumnName("updatedwhen");

                    b.HasKey("Id")
                        .HasName("Sends_pkey");

                    b.HasIndex("IdsectorNavigationId");

                    b.HasIndex("IdsubsectorNavigationId");

                    b.HasIndex(new[] { "Iduser" }, "IX_Sends_iduser");

                    b.ToTable("Sends", "identity");
                });

            modelBuilder.Entity("PGTech_io.Models.Subsector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("Idsector")
                        .HasColumnType("integer")
                        .HasColumnName("idsector");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("Subsectors_pkey");

                    b.HasIndex(new[] { "Idsector" }, "IX_Subsectors_idsector");

                    b.ToTable("Subsectors", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PGTech_io.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PGTech_io.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGTech_io.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PGTech_io.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PGTech_io.Models.Documentation", b =>
                {
                    b.HasOne("PGTech_io.Models.Send", "IdsolicitationNavigation")
                        .WithMany("Documentations")
                        .HasForeignKey("Idsolicitation")
                        .IsRequired()
                        .HasConstraintName("fk_solicit");

                    b.Navigation("IdsolicitationNavigation");
                });

            modelBuilder.Entity("PGTech_io.Models.Response", b =>
                {
                    b.HasOne("PGTech_io.Models.Send", "IdsolicitationNavigation")
                        .WithMany("Responses")
                        .HasForeignKey("Idsolicitation")
                        .IsRequired()
                        .HasConstraintName("fk_solicit");

                    b.HasOne("PGTech_io.Data.ApplicationUser", "IduserNavigation")
                        .WithMany("Responses")
                        .HasForeignKey("Iduser")
                        .HasConstraintName("fk_user");

                    b.Navigation("IdsolicitationNavigation");

                    b.Navigation("IduserNavigation");
                });

            modelBuilder.Entity("PGTech_io.Models.Send", b =>
                {
                    b.HasOne("PGTech_io.Models.Sector", "IdsectorNavigation")
                        .WithMany("Sends")
                        .HasForeignKey("IdsectorNavigationId");

                    b.HasOne("PGTech_io.Models.Subsector", "IdsubsectorNavigation")
                        .WithMany()
                        .HasForeignKey("IdsubsectorNavigationId");

                    b.HasOne("PGTech_io.Data.ApplicationUser", "IduserNavigation")
                        .WithMany("Senders")
                        .HasForeignKey("Iduser")
                        .HasConstraintName("fk_user");

                    b.Navigation("IdsectorNavigation");

                    b.Navigation("IdsubsectorNavigation");

                    b.Navigation("IduserNavigation");
                });

            modelBuilder.Entity("PGTech_io.Models.Subsector", b =>
                {
                    b.HasOne("PGTech_io.Models.Sector", "IdsectorNavigation")
                        .WithMany("Subsectors")
                        .HasForeignKey("Idsector")
                        .IsRequired()
                        .HasConstraintName("fk_sector");

                    b.Navigation("IdsectorNavigation");
                });

            modelBuilder.Entity("PGTech_io.Data.ApplicationUser", b =>
                {
                    b.Navigation("Responses");

                    b.Navigation("Senders");
                });

            modelBuilder.Entity("PGTech_io.Models.Sector", b =>
                {
                    b.Navigation("Sends");

                    b.Navigation("Subsectors");
                });

            modelBuilder.Entity("PGTech_io.Models.Send", b =>
                {
                    b.Navigation("Documentations");

                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
