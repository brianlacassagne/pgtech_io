@page "/viewModal"
@using PGTech_io.Components.UI_Model
@using PGTech_io.Controllers
@using PGTech_io.Domain.Enums
@using PGTech_io.DTO
@using PGTech_io.Models
@rendermode InteractiveServer
@inject ResponseController ResponseController;

<Modal @ref="modalRef" Title="@defineStatus" IsVerticallyCentered="true" Size="ModalSize.Large">
    <BodyTemplate>
        <EditForm Model="@existingSender" FormName="ViewModal">
        <div class="input_box">
            <label for="username">Usuario</label>
            <!--<InputText Value="someValue" id="username" placeholder="Usuario" readonly />-->
        </div>

        <div class="input_box">
            <label for="client">Cliente</label>
            <InputText type="client" @bind-Value="existingSender.Client"  id="client" required readonly/>
        </div>

        <div class="input_box">
            <label for="sectorA">SectorA</label>
            <InputText type="checkbox" @bind-Value="existingSender.Sector"  id="sectorA" readonly/>
            <label for="sectorB">SectorB</label>
            <InputText type="checkbox" @bind-Value="existingSender.Sector"  id="sectorB" readonly/>
        </div>

        <div class="input_box">
            <tr>
                <InputRadioGroup @bind-Value="existingSender.Subsector">
                    <td><InputRadio Value="SubsectorEnums.Subsector.TestA1"/> Subsector A1</td>
                    <td><InputRadio Value="SubsectorEnums.Subsector.TestB1"/> Subsector A2</td>
                    <td><InputRadio Value="SubsectorEnums.Subsector.TestC1"/> Subsector A3</td>
                    <td><InputRadio Value="SubsectorEnums.Subsector.TestD1"/> Subsector A4</td>
                </InputRadioGroup>
            </tr>
        </div>
        
        <div class="input_box">
            <tr>
                <InputRadioGroup @bind-Value="existingSender.Subsector">
                    <td><InputRadio Value="SubsectorEnums.SubsectorB.TestB2"/> Subsector A1</td>
                    <td><InputRadio Value="SubsectorEnums.SubsectorB.TestB2"/> Subsector A2</td>
                    <td><InputRadio Value="SubsectorEnums.SubsectorB.TestC2"/> Subsector A3</td>
                    <td><InputRadio Value="SubsectorEnums.SubsectorB.TestD2"/> Subsector A4</td>
                </InputRadioGroup>
            </tr>
        </div>
        
        <div class="input_box">
            <label for="OtroSubsector">Otro</label>
            <InputText type="OtroSubsector" @bind-Value="existingSender.Subsector" id="OtroSubsector" readonly/>
        </div>

        <div class="input_box">
            <label for="problemDescription">Description del Problema</label>
            <InputTextArea type="problemDescription" @bind-Value="existingSender.Problemdescription" id="problemDescription" readonly/>
        </div>
        
        <label for="document">Input Solicitation Documents:</label>
        <input type="file" id="document" name="document" 
               accept="image/png, image/jpeg, .doc,.docx,.xml,
                application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document" 
               multiple />
        </EditForm>

        <EditForm Model="@existingResponse" FormName="AdminModal">
            <div class="input_box">
                <label for="username">Usuario</label>
                <!--<InputText Value="someValue" id="username" placeholder="Admin" readonly />-->
            </div>

            <div class="input_box">
                <label for="Solutiondescription">Solucion del Problema</label>
                <InputTextArea type="Solutiondescription" @bind-Value="existingResponse.Solutiondescription" id="Solutiondescription" readonly/>
            </div>

            <label for="document">Input Response Documents:</label>
            <input type="file" id="document" name="document"
                   accept="image/png, image/jpeg, .doc,.docx,.xml,
                application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                   multiple/>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Cerrar</Button>
    </FooterTemplate>
</Modal>

@code {
    private Modal? modalRef;
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsUpdate { get; set; }
    [Parameter] public EventCallback OnOperationCompleted { get; set; }
    [Parameter] public SenderDTO? existingSender { get; set; } = new();
    
    Response? existingResponse { get; set; } = new();
    private int selectedId = 0;
    private bool isLoaded;
    private string defineStatus = "Vista";
    private string titleString = "";
    
    //------------------------------------------------------------------------------------------------------------------

    public async Task OnShowModalClick(ModalParameters modalParameters)
    {
        IsVisible = modalParameters.isVisible;
        existingSender = modalParameters.messageType as SenderDTO;
        existingResponse = new();
        
        if (IsVisible)
        {
            isLoaded = !isLoaded;
            
            if (existingSender != null)
            {
                selectedId = existingSender.Id;
                await AssignPossibleResponse();
                titleString = $"{existingSender.Client} {defineStatus}"; //Add User later
            }
            await modalRef?.ShowAsync();
        }
    }
    
    private async Task OnHideModalClick()
    {
        existingSender = null;
        existingResponse = null;
        await modalRef?.HideAsync(); 
    }
    
    //------------------------------------------------------------------------------------------------------------------
    
    protected override async Task OnInitializedAsync()
    {
    }
    
    //------------------------------------------------------------------------------------------------------------------
    
    private async Task AssignPossibleResponse()
    {
        var response = await ResponseController.GetBySolicitationId(selectedId);
                 
        if (response != null)
        {
            Console.WriteLine("Response for [" + existingSender.ToString()  + "] found, ID -> " + response.ToString());
            existingResponse = response;
            IsUpdate = true;
        }
    }
}