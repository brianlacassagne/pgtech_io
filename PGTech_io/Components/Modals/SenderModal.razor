@page "/operatorModal"
@using BlazorBootstrap
@using PGTech_io.Components.UI_Model
@using PGTech_io.Controllers
@using PGTech_io.Data
@using PGTech_io.Domain.Enums
@using PGTech_io.DTO
@using PGTech_io.Models
@using PGTech_io.Services
@rendermode InteractiveServer
@inject SenderController SenderController
@inject UserService UserService
@inject SectorController SectorController

<AuthorizeView>@context.User.Identity?.Name</AuthorizeView>

<Modal @ref="modalRef" Title="@defineStatus" IsVerticallyCentered="true" Size="ModalSize.Large">
    <BodyTemplate>
        <EditForm Model="@senderMessage" OnValidSubmit="@SelectOperation" FormName="OperatorModal">
            <div class="input_box">
                <label for="username">@User.UserName</label>
            </div>

            <div class="input_box">
                <label for="client">Cliente</label>
                <InputText type="client" @bind-Value="senderMessage.Client"  id="client" required />
            </div>

            <div class="input_box">
                <label for="sector">Sectores</label>
                <InputSelect id="sector" @bind-Value="@SelectedSectorId">
                    @foreach (Sector sector in @sectors)
                    {
                        <option value="@sector.Id">@sector.Name</option>
                    }
                </InputSelect>
            </div>
            
            <div class="input_box">
                <tr>
                    <label for="sectores">Subsectores</label>
                    <InputRadioGroup @bind-Value="SelectedSubsectorId" >
                        @foreach (Subsector subsector in subsectors) //check this
                        {
                            <td><InputRadio Value="@subsector.Id"></InputRadio></td>
                            <label>@subsector.Name</label>
                        }
                    </InputRadioGroup>
                </tr>
            </div>

            <div class="input_box">
                <label for="problemDescription">Description del Problema</label>
                <InputTextArea type="problemDescription" @bind-Value="senderMessage.Problemdescription" id="problemDescription" />
            </div>
        
            <label for="document">Input Solicitation Documents:</label>
            <input type="file" id="document" name="document" 
                   accept="image/png, image/jpeg, .doc,.docx,.xml,
                application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document" 
                   multiple />
        
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Cerrar</Button>
        <Button Color="ButtonColor.Primary" @onclick="SelectOperation">@defineStatus</Button>
    </FooterTemplate>
    
</Modal>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsUpdate { get; set; }
    [Parameter] public EventCallback onOperationCompleted { get; set; }
    [Parameter] public SenderDTO? senderMessage { get; set; } = new();
    
    private Modal? modalRef;
    private List<Sector> sectors = new();
    private List<Subsector> subsectors = new();
    
    private int SelectedSectorId
    {
        get => selectedSectorId;
        set
        {
            if (selectedSectorId != value)
            {
                selectedSectorId = value;
                _ = OnSectorChange(value);
            }
        }
    }
    
    private int SelectedSubsectorId
    {
        get => selectedSubsectorId;
        set
        {
            if (selectedSubsectorId != value)
            {
                selectedSubsectorId = value;
                _ = OnSubsectorChange(value);
            }
        }
    }

    private int selectedSectorId { get; set; }
    private int selectedSubsectorId { get; set; }
    private string _sectorId;
    private string defineStatus = string.Empty;
    private ApplicationUser? User;
    
    //------------------------------------------------------------------------------------------------------------------

    public async Task OnShowModalClick(ModalParameters modalParameters)
    {
        if (modalParameters.appUser is null || !modalParameters.isVisible) return;
        
        IsUpdate = modalParameters.isUpdate;
        IsVisible = modalParameters.isVisible;
        senderMessage = modalParameters.messageType as SenderDTO;
        User = modalParameters.appUser;
        
        defineStatus = IsUpdate ? "Update" : "Guardar";
        
        sectors = await SectorController.GetAllSectors();
        
        if (senderMessage != null)
            senderMessage.Iduser = User.Id;
        
        await modalRef?.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modalRef?.HideAsync(); 
    }
    
    //------------------------------------------------------------------------------------------------------------------
    
    protected override async Task OnInitializedAsync()
    {
        /*sectors = [
            new Sector("Fifo"), 
            new Sector("Tofu"),
            new Sector("Lifo")
        ]; 
        */
    }
    
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) { } return Task.CompletedTask;
    }
    
    //------------------------------------------------------------------------------------------------------------------
    

    private async Task SelectOperation()
    {
        Console.WriteLine("IsUpdate:" + IsUpdate);
    
        if (IsUpdate)
        {
            await Update();
        }
        else
        {
            await Create();
        }

        await OnHideModalClick();
        await ReturnTask();
    }
    
    //------------------------------------------------------------------------------------------------------------------
    
    private async Task Create() //Move to Validations
    {
        //if (!ValidateData()) return;
        
        if (senderMessage == null) senderMessage = new SenderDTO();

        senderMessage.Idsector = selectedSectorId;
        senderMessage.Idsubsector = selectedSubsectorId;
        
        var sender = await SenderController.Post(senderMessage);
        
        if (sender)
        {
            Console.WriteLine("Solicitation sent!");
        }
    }
    

    private async Task Update()
    {
        //if (!ValidateData()) return;
        
        if (senderMessage == null) return;
        
        senderMessage.Idsector = selectedSectorId;
        senderMessage.Idsubsector = selectedSubsectorId;

        var response = await SenderController.Put(senderMessage, senderMessage.Id);

        if (response)
        {
            Console.WriteLine("Solicitation updated!");
        }
    }
    
    //------------------------------------------------------------------------------------------------------------------

    private async Task ReturnTask()
    {
        await onOperationCompleted.InvokeAsync();
        await OnHideModalClick();
    }

    private bool ValidateData()
    {
        return true;
    }

    private async Task OnSectorChange(int sectorId) // SR check
    {
        selectedSectorId = sectorId; //Validate Id Exist
        subsectors = await SectorController.GetSubsectorsById(selectedSectorId);
        Console.WriteLine($"Subsector count: " + subsectors.Count);
        StateHasChanged();
    }
    
    private async Task OnSubsectorChange(int subsectorId) // SR check
    {
        selectedSubsectorId = subsectorId;
        Console.WriteLine($"Subsector Id: " + selectedSubsectorId);
        StateHasChanged();
    }
}