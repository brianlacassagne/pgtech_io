@page "/operatorModal"
@using PGTech_io.Components.UI_Model
@using PGTech_io.Controllers
@using PGTech_io.Domain.Enums
@using PGTech_io.DTO
@using PGTech_io.Models
@rendermode InteractiveServer
@inject SolicitationController SolicitationController;

<Modal @ref="modalRef" Title="@defineStatus" IsVerticallyCentered="true" Size="ModalSize.Large">
    <BodyTemplate>
        <EditForm Model="@SolicitParam" OnValidSubmit="@SelectOperation" FormName="OperatorModal">
        <div class="input_box">
            <label for="username">Usuario</label>
            <!--<InputText Value="someValue" id="username" placeholder="Usuario" readonly />-->
        </div>

        <div class="input_box">
            <label for="client">Cliente</label>
            <InputText type="client" @bind-Value="SolicitParam.Client"  id="client" required />
        </div>

        <div class="input_box">
            <label for="sectorA">SectorA</label>
            <InputText type="checkbox" @bind-Value="SolicitParam.Sector"  id="sectorA" />
            <label for="sectorB">SectorB</label>
            <InputText type="checkbox" @bind-Value="SolicitParam.Subsector"  id="sectorB" />
        </div>

        <div class="input_box">
            <tr>
                <InputRadioGroup @bind-Value="SolicitParam.Subsector">
                    <td><InputRadio Value="SubsectorEnums.Subsector.TestA1"/> Subsector A1</td>
                    <td><InputRadio Value="SubsectorEnums.Subsector.TestB1"/> Subsector A2</td>
                    <td><InputRadio Value="SubsectorEnums.Subsector.TestC1"/> Subsector A3</td>
                    <td><InputRadio Value="SubsectorEnums.Subsector.TestD1"/> Subsector A4</td>
                </InputRadioGroup>
            </tr>
        </div>
        
        <div class="input_box">
            <tr>
                <InputRadioGroup @bind-Value="SolicitParam.Subsector">
                    <td><InputRadio Value="SubsectorEnums.SubsectorB.TestB2"/> Subsector A1</td>
                    <td><InputRadio Value="SubsectorEnums.SubsectorB.TestB2"/> Subsector A2</td>
                    <td><InputRadio Value="SubsectorEnums.SubsectorB.TestC2"/> Subsector A3</td>
                    <td><InputRadio Value="SubsectorEnums.SubsectorB.TestD2"/> Subsector A4</td>
                </InputRadioGroup>
            </tr>
        </div>
        
        <div class="input_box">
            <label for="OtroSubsector">Otro</label>
            <InputText type="OtroSubsector" @bind-Value="SolicitParam.Subsector" id="OtroSubsector" />
        </div>

        <div class="input_box">
            <label for="problemDescription">Description del Problema</label>
            <InputTextArea type="problemDescription" @bind-Value="SolicitParam.Problemdescription" id="problemDescription" />
        </div>
        
        <label for="document">Input Solicitation Documents:</label>
        <input type="file" id="document" name="document" 
               accept="image/png, image/jpeg, .doc,.docx,.xml,
                application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document" 
               multiple />
        
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Cerrar</Button>
        <Button Color="ButtonColor.Primary" @onclick="SelectOperation">@defineStatus</Button>
    </FooterTemplate>
    
</Modal>

@code {
    private Modal? modalRef;
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsUpdate { get; set; }
    [Parameter] public EventCallback OnOperationCompleted { get; set; }
    [Parameter] public Solicit? SolicitParam { get; set; } = new();

    UserDTO userDto { get; set; } = new();
    private int selectedId = 0;
    private bool isLoaded;
    private string defineStatus = "";
    
    //------------------------------------------------------------------------------------------------------------------

    public async Task OnShowOperatorModalClick(ModalParameters modalParameters)
    {
        IsUpdate = modalParameters.isUpdate;
        SolicitParam = modalParameters.messageType as Solicit;
        IsVisible = modalParameters.isVisible;
        
        if (IsVisible)
        {
            isLoaded = !isLoaded;
            if (SolicitParam != null) { selectedSolicitId(); }
            defineStatus = IsUpdate ? "Update" : "Guardar";
            
            await modalRef?.ShowAsync();
        }
    }

    private async Task OnHideModalClick()
    {
        await modalRef?.HideAsync(); 
    }
    
    //------------------------------------------------------------------------------------------------------------------
    
    protected override async Task OnInitializedAsync()
    {
    }
    
    //------------------------------------------------------------------------------------------------------------------

    private void selectedSolicitId()
    {
        selectedId = SolicitParam.Id;
    }

    private async Task SelectOperation()
    {
        Console.WriteLine("IsUpdate:" + IsUpdate);
    
        if (IsUpdate)
        {
            await Update();
        }
        else
        {
            await Create();
        }

        await OnHideModalClick();
        await ReturnTask();
    }
    
    //------------------------------------------------------------------------------------------------------------------
    
    private async Task Create() //Move to Validations
    {
        //if (!ValidateData()) return;
        
        if (SolicitParam == null) SolicitParam = new(); 
        
        var response = await SolicitationController.Post(SolicitParam);
        
        if (response)
        {
            Console.WriteLine("Solicitation sent!");
        }
    }
    

    private async Task Update()
    {
        //if (!ValidateData()) return;
        
        if (SolicitParam == null) return;

        var response = await SolicitationController.Put(SolicitParam, selectedId);

        if (response)
        {
            Console.WriteLine("Solicitation updated!");
        }
    }
    
    //------------------------------------------------------------------------------------------------------------------

    private async Task ReturnTask()
    {
        await OnOperationCompleted.InvokeAsync();
        await OnHideModalClick();
    }

    private bool ValidateData()
    {
        return true;
    }
}