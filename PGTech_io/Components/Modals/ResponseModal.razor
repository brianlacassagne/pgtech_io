@page "/responseModal"
@using PGTech_io.Components.UI_Model
@using PGTech_io.Controllers
@using PGTech_io.DTO
@using PGTech_io.Models
@using PGTech_io.Services
@rendermode InteractiveServer
@inject ResponseController ResponseController;
@inject UserService UserService;

<Modal @ref="modalRef" Title="@titleString" IsVerticallyCentered="true" Size="ModalSize.Large">
    <BodyTemplate>
        <EditForm Model="@existingResponse" OnValidSubmit="@SelectOperation" FormName="OperatorModal">
            <div class="input_box">
                <label for="username">@userName</label>
            </div>

            <div class="input_box">
                <label for="Solutiondescription">Solucion del Problema</label>
                <InputTextArea type="Solutiondescription" @bind-Value="existingResponse.Solutiondescription" id="Solutiondescription"/>
            </div>

            <label for="document">Input Response Documents:</label>
            <input type="file" id="document" name="document"
                   accept="image/png, image/jpeg, .doc,.docx,.xml,
                application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                   multiple/>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Cerrar</Button>
        <Button Color="ButtonColor.Primary" @onclick="SelectOperation">@defineStatus</Button>
    </FooterTemplate>
</Modal>

@code {
    private Modal? modalRef;
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsUpdate { get; set; }
    [Parameter] public EventCallback onOperationCompleted { get; set; }
    [Parameter] public SenderDTO? senderMessage { get; set; } = new();
    
    Response? existingResponse { get; set; } = new();
    private int selectedId = 0;
    private bool isLoaded;
    private string defineStatus = "";
    private string titleString = "";
    private string userName = "";
    
    //------------------------------------------------------------------------------------------------------------------

    public async Task OnShowResponseModalClick(ModalParameters modalParameters)
    {
        IsVisible = modalParameters.isVisible;
        IsUpdate = modalParameters.isUpdate;
        senderMessage = modalParameters.messageType as SenderDTO;
        existingResponse = new();

        if (!IsVisible || senderMessage == null) return;
        
        isLoaded = !isLoaded;
        await AssignResponse();
        existingResponse.Iduser = modalParameters.userId; // move to constructor
        selectedId = senderMessage.Id;
        defineStatus = IsUpdate ? "Update" : "Guardar";
        titleString = $"{senderMessage.Client} {defineStatus}"; //Add User later
        
        setUserName();
        
        await modalRef?.ShowAsync();
    }

    private async Task AssignResponse()
    {
        var response = await ResponseController.GetBySolicitationId(selectedId);
        if (response == null) return;
        
        Console.WriteLine("Response for [" + senderMessage  + "] found, ID -> " + response);
        existingResponse = response;
        
        IsUpdate = true;
    }

    private async Task OnHideModalClick()
    {
        await modalRef?.HideAsync(); 
    }
    
    //------------------------------------------------------------------------------------------------------------------
    
    protected override async Task OnInitializedAsync()
    {
        
    }
    
    //------------------------------------------------------------------------------------------------------------------

    private async Task SelectOperation()
    {
        Console.WriteLine("IsUpdate:" + IsUpdate);
    
        if (IsUpdate) await Update();
        
        else await Create();

        existingResponse = null;
        await OnHideModalClick();
        await ReturnTask();
    }
    
    //------------------------------------------------------------------------------------------------------------------
    
    private async Task Create() //Move to Validations
    {
        //if (!ValidateData()) return;
        if (senderMessage == null || existingResponse == null) return;
        
        var response = await ResponseController.Post(existingResponse, senderMessage.Id);
        
        if (response)
        {
            Console.WriteLine("Response sent!");
        }
    }
    

    private async Task Update()
    {
        //if (!ValidateData()) return;
        
        if (senderMessage == null || existingResponse == null) return;

        var response = await ResponseController.Put(existingResponse, existingResponse.Id);

        if (response)
        {
            Console.WriteLine("Response updated!");
        }
    }
    
    private async Task setUserName()
    {
        userName = await @UserService.UserName();
    }
    
    //------------------------------------------------------------------------------------------------------------------

    private async Task ReturnTask()
    {
        await onOperationCompleted.InvokeAsync();
        await OnHideModalClick();
    }

    private bool ValidateData()
    {
        return true;
    }
}