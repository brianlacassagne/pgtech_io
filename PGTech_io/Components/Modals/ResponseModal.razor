@page "/responseModal"
@using PGTech_io.Components.UI_Model
@using PGTech_io.Controllers
@using PGTech_io.DTO
@using PGTech_io.Models
@rendermode InteractiveServer
@inject ResponseController ResponseController;
@inject SolicitationController SolicitationController

<Modal @ref="modalRef" Title="@titleString" IsVerticallyCentered="true" Size="ModalSize.Large">
    <BodyTemplate>
        <EditForm Model="@ExistingResponse" OnValidSubmit="@SelectOperation" FormName="OperatorModal">
            <div class="input_box">
                <label for="username">Usuario</label>
            <!--<InputText Value="someValue" id="username" placeholder="Admin" readonly />-->
            </div>

            <div class="input_box">
                <label for="Solutiondescription">Solucion del Problema</label>
                <InputTextArea type="Solutiondescription" @bind-Value="ExistingResponse.Solutiondescription" id="Solutiondescription"/>
            </div>

            <label for="document">Input Response Documents:</label>
            <input type="file" id="document" name="document"
                   accept="image/png, image/jpeg, .doc,.docx,.xml,
                application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                   multiple/>

        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Cerrar</Button>
        <Button Color="ButtonColor.Primary" @onclick="SelectOperation">@defineStatus</Button>
    </FooterTemplate>
</Modal>

@code {
    private Modal? modalRef;
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsUpdate { get; set; }
    [Parameter] public EventCallback OnOperationCompleted { get; set; }
    [Parameter] public Solicit? SolicitParam { get; set; } = new();
    
    UserDTO userDto { get; set; } = new();
    Response? ExistingResponse { get; set; } = new();
    private int selectedId = 0;
    private bool isLoaded;
    private bool hasOperated = false;
    private string defineStatus = "";
    private string titleString = "";
    
    //------------------------------------------------------------------------------------------------------------------

    public async Task OnShowResponseModalClick(ModalParameters modalParameters)
    {
        IsVisible = modalParameters.isVisible;
        IsUpdate = modalParameters.isUpdate;
        SolicitParam = modalParameters.messageType as Solicit;
        ExistingResponse = new();
        
        if (IsVisible)
        {
            isLoaded = !isLoaded;
            
            if (SolicitParam != null)
            {
                await AssignPossibleResponse();
                selectedId = SolicitParam.Id;
                defineStatus = IsUpdate ? "Update" : "Guardar";
                titleString = $"{SolicitParam.Client} {defineStatus}"; //Add User later
            }
            await modalRef?.ShowAsync();
        }
    }

    private async Task AssignPossibleResponse()
    {
        var response = await ResponseController.GetBySolicitationId(selectedId);
                 
        if (response != null)
        {
            Console.WriteLine("Response for [" + SolicitParam.ToString()  + "] found, ID -> " + response.ToString());
            ExistingResponse = response;
            IsUpdate = true;
        }
    }

    private async Task OnHideModalClick()
    {
        await modalRef?.HideAsync(); 
    }
    
    //------------------------------------------------------------------------------------------------------------------
    
    protected override async Task OnInitializedAsync()
    {
        
    }
    
    //------------------------------------------------------------------------------------------------------------------

    private async Task SelectOperation()
    {
        Console.WriteLine("IsUpdate:" + IsUpdate);
    
        if (IsUpdate) await Update();
        
        else await Create();

        ExistingResponse = null;
        await OnHideModalClick();
        await ReturnTask();
    }
    
    //------------------------------------------------------------------------------------------------------------------
    
    private async Task Create() //Move to Validations
    {
        //if (!ValidateData()) return;

        if (SolicitParam == null || ExistingResponse == null) return;
        
        var response = await ResponseController.Post(ExistingResponse, SolicitParam.Id);
        
        if (response)
        {
            Console.WriteLine("Response sent!");
        }
    }
    

    private async Task Update()
    {
        //if (!ValidateData()) return;
        
        if (SolicitParam == null || ExistingResponse == null) return;

        var response = await ResponseController.Put(ExistingResponse, ExistingResponse.Id);

        if (response)
        {
            Console.WriteLine("Response updated!");
        }
    }
    
    
    //------------------------------------------------------------------------------------------------------------------

    private async Task ReturnTask()
    {
        await OnOperationCompleted.InvokeAsync();
        await OnHideModalClick();
    }

    private bool ValidateData()
    {
        return true;
    }
}