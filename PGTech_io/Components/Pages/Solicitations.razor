@page "/solicitations"
@using PGTech_io.Controllers
@using PGTech_io.Models
@using PGTech_io.Components.Modals
@using PGTech_io.Components.UI_Model
@inject SolicitationController SolicitationController;
@rendermode InteractiveServer

<PageTitle>Solicit</PageTitle>

<h1>Solicit</h1>

@if(isVisible)
{
    <DataTable TModel="Solicitation"
               Items="ListSolicitations"
               AllowRowSelection="true"
               RowClickedEvent="SelectedRowItem"
               SelectedItemCssClass="bg-info">
        
        <DataTableColumn TModel="Solicitation"
                         IsSortable="true"
                         IsFilterable="true"
                         IsVisible="false"
                         Property="(e) => e.IdProperty"/>

        <DataTableColumn TModel="Solicitation"
                         IsSortable="true"
                         IsFilterable="true"
                         Property="(e) => e.IdUserProperty"
                         CustomTitle="Usuario"/>

        <DataTableColumn TModel="Solicitation"
                         IsSortable="true"
                         IsFilterable="true"
                         Property="(e) => e.ClientProperty"
                         CustomTitle="Cliente"/>

        <DataTableColumn TModel="Solicitation"
                         IsSortable="true"
                         IsFilterable="true"
                         Property="(e) => e.SectorProperty"
                         CustomTitle="Sector"/>

        <DataTableColumn TModel="Solicitation"
                         IsSortable="true"
                         IsFilterable="true"
                         Property="(e) => e.SubsectorProperty"
                         CustomTitle="Subsector"/>

        <DataTableColumn TModel="Solicitation"
                         IsSortable="true"
                         IsFilterable="true"
                         IsVisible="false"
                         Property="(e) => e.ProblemDescriptionProperty"/>

        <DataTableColumn TModel="Solicitation"
                         IsSortable="true"
                         IsFilterable="true"
                         Property="(e) => e.CreatedWhenProperty"/>

        <DataTableColumn TModel="Solicitation"
                         IsSortable="true"
                         IsFilterable="true"
                         IsVisible="false"
                         Property="(e) => e.UpdatedWhenProperty"/>
        
        <DataTableColumn TModel="Solicitation"
                         IsSortable="true"
                         IsFilterable="true"
                         IsVisible="false"
                         Property="(e) => e.DeletedWhenProperty"/>
        
        <DataTableColumn TModel="Solicitation"
                         IsSortable="true"
                         IsFilterable="true"
                         IsVisible="true"
                         Property="(e) => e.IdResponseProperty"/>
    </DataTable>
}

<p>SelectedRow: @SelectedSolicitation?.ToString()</p>
    
<!--<button class="btn btn-primary" @onclick="GetSolicitation">GetOne Solicitation (Once Please)</button>-->
<!--<button class="btn btn-primary" @onclick="CreateSolicitation">Solicit Test</button>

<ResponseModal @ref="modalRes" IsUpdate="@isUpdate" Solicit="SelectedSolicitation" OnOperationCompleted="OnAfterModalOperation"></ResponseModal>
-->

<button type="button" class="btn btn-primary" @onclick="UpsertRow">Upsert</button>
<button type="button" class="btn btn-primary" @onclick="RespondRow">Responder</button>

<OperatorModal @ref="modalSolicit" OnOperationCompleted="OnAfterModalSolicitOperation"></OperatorModal>
<ResponseModal @ref="modalResponse" OnOperationCompleted="OnAfterModalOperation"></ResponseModal>

<p>@dataInput</p>

@code {
    private OperatorModal? modalSolicit;
    private ResponseModal? modalResponse;
    private bool isModalVisible = false;
    private List<Solicitation?> ListSolicitations { get; set; } = new();
    private Solicitation? SelectedSolicitation { get; set; } = new();
    private string dataInput = "";
    private bool isVisible = false;
    private bool isUpdate = false;
    private bool showModal = false;
    
    protected override async Task OnInitializedAsync()
    {
        ListSolicitations = await SolicitationController.GetAll();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            isVisible = true;
        return Task.CompletedTask;
    }
    
    private async Task OnAfterModalSolicitOperation()
    {
        StateHasChanged();
        ListSolicitations = await SolicitationController.GetAll();
    }
    
    private async Task OnAfterModalOperation()
    {
        StateHasChanged();
    }
    
    private async Task OpenSolicitModal()
    {
        try
        {
            if (modalSolicit is not null)
            {
                var parameters = new ModalParameters(isUpdate, true, SelectedSolicitation);
                await modalSolicit.OnShowOperatorModalClick(parameters);
            }
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine("Modal open failed: " + ex.Message);
        }
    }
    
    private async Task OpenResponseModal()
    {
        if (SelectedSolicitation == null || SelectedSolicitation.IdProperty == 0) return;
        
        try
        {
            if (modalResponse is not null)
            {
                var parameters = new ModalParameters(isUpdate, true, SelectedSolicitation);
                await modalResponse.OnShowResponseModalClick(parameters);
            }
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine("Modal open failed: " + ex.Message);
        }
    }
    
    private Task SelectedRowItem(Solicitation solicitation)
    {
        if (!showModal && solicitation != null && solicitation.IdProperty != 0)
        {
            SelectedSolicitation = solicitation;
            isUpdate = true;
        }
        Console.WriteLine(solicitation.ToString());
        return Task.CompletedTask;
    }
    
    private void SelectedRowItem()
    {
        isUpdate = SelectedSolicitation != null;
    }
    
    private async Task UpsertRow()
    {
        await OpenSolicitModal();
        await Task.CompletedTask;
    }
    
    private async Task RespondRow()
    {
        await OpenResponseModal();
        await Task.CompletedTask;
    }
    
    /*
     private async Task GetSolicitation()
       {
           dataInput = "Request Detected";
           Console.WriteLine(dataInput);
           StateHasChanged();
       }

       private async Task GetAllSolicitations()
       {
           ListSolicitations = await SolicitationController.GetAll();
           StateHasChanged();
       }

       private async Task CreateSolicitation()
       {
           dataInput = "Post Detected";
           Console.WriteLine(dataInput);
           await UpsertRow();
           
           StateHasChanged();
       }
       
       private async Task UpdateSolicitation()
       {
           dataInput = "Update Detected";
           Console.WriteLine(dataInput);
           await UpsertRow();
           
           StateHasChanged();
       }
       
       private async Task DeleteSolicitation()
       {
           dataInput = "Delete Detected";
           Console.WriteLine(dataInput);
           await SolicitationController.Delete(new Solicitation());
           StateHasChanged();
       }
     */
}