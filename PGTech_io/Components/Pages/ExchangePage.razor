@page "/solicitations"
@using Microsoft.AspNetCore.Authorization
@using PGTech_io.Controllers
@using PGTech_io.Components.Modals
@using PGTech_io.Components.UI_Model
@using PGTech_io.Data
@using PGTech_io.DTO
@using PGTech_io.Models
@using PGTech_io.Services
@inject SenderController SenderController
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService
@inject SectorController SectorController
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Solicit</PageTitle>

<h1>Solicit</h1>

@if(isVisible)
{
    <DataTable TModel="SenderDTO"
               Items="ListSolicitations"
               AllowRowSelection="true"
               RowClickedEvent="SelectedRowItem"
               SelectedItemCssClass="bg-info">
        
        <DataTableColumn TModel="SenderDTO"
                         IsSortable="true"
                         IsFilterable="true"
                         IsVisible="false"
                         Property="(e) => e.Id"/>
        
        <DataTableColumn TModel="SenderDTO"
                         IsSortable="true"
                         IsFilterable="true"
                         Property="(e) => e.IdUserNavigation.UserName"     
                         CustomTitle="Usuario"/>

        <DataTableColumn TModel="SenderDTO"
                         IsSortable="true"
                         IsFilterable="true"
                         Property="(e) => e.Client"     
                         CustomTitle="Cliente"/>

        <DataTableColumn TModel="SenderDTO"
                         IsSortable="true"
                         IsFilterable="true"
                         Property="(e) => e.IdsectorNavigation.Name"
                         CustomTitle="Sector"/>

        <DataTableColumn TModel="SenderDTO"
                         IsSortable="true"
                         IsFilterable="true"
                         Property="(e) => e.Idsubsector"
                         CustomTitle="Subsector"/>

        <DataTableColumn TModel="SenderDTO"
                         IsSortable="true"
                         IsFilterable="true"
                         IsVisible="false"
                         Property="(e) => e.Problemdescription"/>

        <DataTableColumn TModel="SenderDTO"
                         IsSortable="true"
                         IsFilterable="true"
                         Property="(e) => e.Createdwhen"/>

        <DataTableColumn TModel="SenderDTO"
                         IsSortable="true"
                         IsFilterable="true"
                         IsVisible="false"
                         Property="(e) => e.Updatedwhen"/>
        
        <DataTableColumn TModel="SenderDTO"
                         IsSortable="true"
                         IsFilterable="true"
                         IsVisible="true"
                         Property="(e) => e.isAnswered"/>
    </DataTable>
}

<p>SelectedRow: @selectedSender?.ToString()</p>

<button type="button" class="btn btn-primary" @onclick="SendMessage">Enviar</button>
<button type="button" class="btn btn-primary" @onclick="RespondMessage">Responder</button>

<SenderModal @ref="modalSolicit" onOperationCompleted="OnAfterModalOperation"></SenderModal>
<ResponseModal @ref="modalResponse" onOperationCompleted="OnAfterModalOperation"></ResponseModal>
<ViewModal @ref="modalView" OnOperationCompleted="OnAfterModalOperation"></ViewModal>

<AuthorizeView Roles="TECNICO">
    <Authorized>
        <button type="button" class="btn btn-primary" @onclick="SendMessage">Enviar</button>
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="USUARIO">
    <Authorized>
        <button type="button" class="btn btn-primary" @onclick="RespondMessage">Responder</button>
    </Authorized>
</AuthorizeView>

<button type="button" class="btn btn-primary" @onclick="ViewMessage">Ver</button>

@code {
    
    private SenderModal? modalSolicit;
    private ResponseModal? modalResponse;
    private ViewModal? modalView;
    
    private List<SenderDTO?> ListSolicitations { get; set; }
    private SenderDTO? selectedSender { get; set; } = new();
    private ApplicationUser User { get; set; }
    private string userId { get; set; }
    
    private bool isVisible = false;
    private bool isEntityUpdate = false;
    private bool showModal = false;
    
    protected override async Task OnInitializedAsync()
    {
        await SetSessionedUserEntity();

        if (!string.IsNullOrEmpty(User.Id))
        {
            ListSolicitations = new List<SenderDTO?>(await SenderController.GetAllByUserId(userId));
            Console.Write($"Solicitations in List: {ListSolicitations.Count}");
        }

        Console.Write($"UserId = {userId}");
    }
    
    private async Task SetSessionedUserEntity()
    {
        userId = await UserService.getSessionedUserId();
        User = await @UserService.getUserByUserId(userId);
    }

    private async Task<string> GetSectorName(Sector e)
    {
        return await SectorController.Get(e.Id).;
        
        return Task.FromResult(e.Name);
    }
    
    private Task<string> GetSubsectorName(int idsector)
    {
        return Task.FromResult(e.Name);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isVisible = true;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
    
    private async Task OnAfterModalOperation()
    {
        if (!string.IsNullOrEmpty(userId))
            ListSolicitations = new List<SenderDTO?>(await SenderController.GetAllByUserId(userId));
        
        StateHasChanged();
    }
    
    private async Task OpenSolicitModal()
    {
        try
        {
            if (modalSolicit is not null)
            {
                var parameters = new ModalParameters(isEntityUpdate, true, User, selectedSender);
                await modalSolicit.OnShowModalClick(parameters);
            }
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine("Modal open failed: " + ex.Message);
        }
    }
    
    private async Task OpenResponseModal()
    {
        if (selectedSender == null || selectedSender.Id == 0) return;
        
        try
        {
            if (modalResponse is not null)
            {
                var parameters = new ModalParameters(false, true, User, selectedSender);
                await modalResponse.OnShowResponseModalClick(parameters);
            }
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine("Modal open failed: " + ex.Message);
        }
    }

    private async Task OpenViewModal()
    {
        if (selectedSender == null || selectedSender.Id == 0) return;
        
        try
        {
            if (modalView is not null)
            {
                var parameters = new ModalParameters(false, true, User, selectedSender);
                await modalView.OnShowModalClick(parameters);
            }
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine("Modal open failed: " + ex.Message);
        }
    }
    
    private async Task SelectedRowItem(SenderDTO sender)
    {
        if (!showModal && selectedSender != sender)
        {
            selectedSender = sender;
            isEntityUpdate = true;
            Console.WriteLine("Selected Solicitation -> " + sender);
            Console.WriteLine(sender.Client);
        }
    }

    private async Task<Sector?> SetSector(SenderDTO sent)
    {
        if (sent != null && sent.Idsector != 0)
        {
            return sent.IdsectorNavigation;
        }
        return null;
    }
    
    private async Task SendMessage()
    {
        await OpenSolicitModal();
        await Task.CompletedTask;
    }
    
    private async Task RespondMessage()
    {
        await OpenResponseModal();
        await Task.CompletedTask;
    }
    
    private async Task ViewMessage()
    {
        await OpenViewModal();
        await Task.CompletedTask;
    }
}